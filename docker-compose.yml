version: '3.8'

services:
  # banco de dados postgresql
  postgres:
    image: postgres:15
    container_name: cfd_postgres
    environment:
      POSTGRES_DB: cfd_pipeline
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # redis para cache e celery
  redis:
    image: redis:7-alpine
    container_name: cfd_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # minio para armazenamento de arquivos
  minio:
    image: minio/minio
    container_name: cfd_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # backend fastapi
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cfd_backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/cfd_pipeline
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
    volumes:
      - ./backend:/app
      - ./scripts:/app/scripts
      - ./output:/app/output
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # frontend react
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: cfd_frontend
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev

  # celery worker para tarefas ass√≠ncronas
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cfd_celery_worker
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/cfd_pipeline
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
    volumes:
      - ./backend:/app
      - ./scripts:/app/scripts
      - ./output:/app/output
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery worker --loglevel=info --concurrency=2

  # celery beat para tarefas agendadas
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cfd_celery_beat
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/cfd_pipeline
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery beat --loglevel=info

volumes:
  postgres_data:
  redis_data:
  minio_data: