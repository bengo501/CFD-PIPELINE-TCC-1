#!/usr/bin/env python3
"""
script para sincronizar sprint 5 com github issues e milestones
"""

import subprocess
import json
from pathlib import Path

# configura√ß√µes
REPO = "bengo501/CFD-PIPELINE-TCC-1"
MILESTONE_NAME = "sprint 5 - interface completa e cfd"
MILESTONE_DESC = """
sprint focado em completar interface web e integrar simula√ß√£o cfd

**per√≠odo:** 12/10/2025 - 19/10/2025

**objetivos:**
- wizard web 100% funcional
- f√≠sica blender corrigida
- cfd openfoam integrado
- identidade visual aplicada
- sistema bil√≠ngue (pt/en)
"""

# tasks do sprint 5
TASKS = [
    {
        "numero": "032",
        "titulo": "implementar wizard web completo (4 modos)",
        "labels": ["enhancement", "frontend", "wizard"],
        "body": """
## descri√ß√£o
criar interface web completa para cria√ß√£o de leitos, replicando bed_wizard.py

## funcionalidades implementadas
- ‚úÖ modo question√°rio interativo
- ‚úÖ modo editor de template inline
- ‚úÖ modo blender (sem cfd)
- ‚úÖ modo blender interativo
- ‚úÖ sistema de ajuda contextual (HelpModal)
- ‚úÖ documenta√ß√£o integrada (DocsModal)
- ‚úÖ preview 3d em tempo real
- ‚úÖ valida√ß√£o robusta

## arquivos criados
- `frontend/src/components/BedWizard.jsx` (767 linhas)
- `frontend/src/components/WizardHelpers.jsx` (207 linhas)
- `frontend/src/styles/BedWizard.css` (609 linhas)
- `backend/app/api/routes_wizard.py` (360 linhas)

## resultado
interface web 100% equivalente ao bed_wizard.py python, com experi√™ncia superior
"""
    },
    {
        "numero": "033",
        "titulo": "corrigir f√≠sica blender (anima√ß√£o + colis√µes)",
        "labels": ["bugfix", "blender", "physics", "critical"],
        "body": """
## problemas identificados
1. ‚ùå part√≠culas ficavam suspensas (n√£o ca√≠am)
2. ‚ùå tampa superior bloqueava entrada
3. ‚ùå cilindro oco tinha colis√£o fantasma interna

## solu√ß√µes implementadas
- ‚úÖ executar anima√ß√£o automaticamente (20s padr√£o)
- ‚úÖ fun√ß√£o `executar_simulacao_fisica()`
- ‚úÖ tampa superior sem colis√£o (`tem_colisao=False`)
- ‚úÖ cilindro com mesh collision
- ‚úÖ bake autom√°tico de f√≠sica

## resultado
modelos 3d fisicamente corretos, part√≠culas acomodadas, prontos para cfd

## arquivo modificado
- `scripts/blender_scripts/leito_extracao.py` (+150 linhas)
"""
    },
    {
        "numero": "034",
        "titulo": "integrar simula√ß√£o cfd openfoam no web",
        "labels": ["enhancement", "cfd", "backend", "frontend"],
        "body": """
## descri√ß√£o
criar interface web para executar e monitorar simula√ß√µes cfd

## implementa√ß√£o

**backend (5 endpoints):**
- POST /api/cfd/create
- GET /api/cfd/status/{id}
- GET /api/cfd/list
- POST /api/cfd/run-from-wizard
- DELETE /api/cfd/{id}

**frontend:**
- componente cfdsimulation.jsx
- monitoramento em tempo real
- auto-refresh 3s
- hist√≥rico de simula√ß√µes
- status visual (6 estados)

## arquivos criados
- `backend/app/api/routes_cfd.py` (270 linhas)
- `frontend/src/components/CFDSimulation.jsx` (230 linhas)
- `frontend/src/styles/CFDSimulation.css` (350 linhas)

## resultado
simula√ß√µes cfd execut√°veis e monitor√°veis diretamente da interface web
"""
    },
    {
        "numero": "035",
        "titulo": "aplicar identidade visual (paleta institucional)",
        "labels": ["design", "ui/ux", "branding"],
        "body": """
## paleta de cores implementada

**cores principais:**
- vinho #5F1923 (t√≠tulos, bot√µes principais)
- verde #50AF50 (sucesso, destaques)
- amarelo #F0B91E (accents)
- laranja #DC7323 (warnings)
- creme #F5F087 (backgrounds)
- branco #FFFFFF (fundo)

## tarefas
- ‚úÖ criar vari√°veis css globais
- ‚úÖ atualizar todos componentes
- ‚úÖ verificar acessibilidade wcag aa/aaa
- ‚úÖ documentar paleta completa

## resultado
interface visualmente coesa e profissional, alinhada com identidade institucional
"""
    },
    {
        "numero": "036",
        "titulo": "implementar internacionaliza√ß√£o (pt/en)",
        "labels": ["enhancement", "i18n", "accessibility"],
        "body": """
## implementa√ß√£o

**sistema completo:**
- ~100 tradu√ß√µes portugu√™s/ingl√™s
- contexto global react
- hook uselanguage
- bot√£o toggle com bandeiras üáßüá∑/üá∫üá∏
- persist√™ncia localstorage

## arquivos criados
- `frontend/src/i18n/translations.js` (181 linhas)
- `frontend/src/context/LanguageContext.jsx` (40 linhas)

## cobertura
navega√ß√£o, wizard, cfd, status, mensagens, tooltips

## resultado
sistema bil√≠ngue completo, experi√™ncia internacional
"""
    },
    {
        "numero": "037",
        "titulo": "melhorar tipografia e legibilidade",
        "labels": ["design", "typography", "accessibility"],
        "body": """
## fontes implementadas

**inter:** sans-serif profissional moderna
**jetbrains mono:** monospace para c√≥digo

## melhorias
- tamanho base: 16px (era 14px)
- h1: 2.5rem (40px)
- h2: 2rem (32px)
- h3: 1.5rem (24px)
- line-height: 1.7
- antialiasing otimizado

## resultado
interface mais leg√≠vel, profissional e acess√≠vel
"""
    },
    {
        "numero": "038",
        "titulo": "implementar sele√ß√£o de formatos de exporta√ß√£o",
        "labels": ["enhancement", "blender", "export"],
        "body": """
## formatos suportados
blend, gltf, glb, obj, fbx, stl (6 formatos)

## implementa√ß√£o

**backend:**
- par√¢metro --formats no script blender
- exporta√ß√£o condicional
- tratamento de erros individual

**frontend:**
- checkboxes visuais
- grid responsivo 2-3 colunas
- contador de selecionados
- recomenda√ß√£o clara

## resultado
usu√°rio escolhe formatos, exporta√ß√£o customiz√°vel, tempo otimizado
"""
    },
    {
        "numero": "039",
        "titulo": "criar visualiza√ß√£o de casos cfd existentes",
        "labels": ["enhancement", "cfd", "file-management"],
        "body": """
## implementa√ß√£o

**backend:**
- routes_casos.py
- an√°lise autom√°tica de casos
- determina√ß√£o de status
- extra√ß√£o de informa√ß√µes

**frontend:**
- casoscfd.jsx
- grid de cards
- status badges
- modal de detalhes
- comandos wsl prontos

## funcionalidades
- listar todos casos em output/cfd/
- status (configured/meshed/running/completed)
- quantidade de resultados (pastas de tempo)
- logs dispon√≠veis
- deletar casos antigos

## resultado
usu√°rio v√™ e gerencia todos casos cfd facilmente
"""
    },
    {
        "numero": "040",
        "titulo": "implementar pipeline completo end-to-end",
        "labels": ["enhancement", "automation", "integration"],
        "body": """
## descri√ß√£o
interface para executar todo o pipeline automaticamente

## fluxo
wizard ‚Üí dsl ‚Üí blender ‚Üí openfoam ‚Üí resultados

## implementa√ß√£o
- visualiza√ß√£o fluxo (5 etapas)
- execu√ß√£o sequencial automatizada
- log em tempo real (estilo terminal)
- barra de progresso animada
- status visual por etapa
- polling de simula√ß√£o
- exibi√ß√£o de resultados

## arquivos
- `frontend/src/components/PipelineCompleto.jsx` (406 linhas)
- `frontend/src/styles/PipelineCompleto.css` (420 linhas)

## resultado
1 clique executa todo o pipeline, equivalente superior ao bed_wizard.py
"""
    }
]


def criar_milestone():
    """criar milestone no github"""
    print("criando milestone...")
    
    cmd = [
        "gh", "api",
        f"/repos/{REPO}/milestones",
        "-X", "POST",
        "-f", f"title={MILESTONE_NAME}",
        "-f", f"description={MILESTONE_DESC}",
        "-f", "state=closed",  # j√° conclu√≠do
        "-f", "due_on=2025-10-19T23:59:59Z"
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            data = json.loads(result.stdout)
            print(f"‚úì milestone criada: #{data['number']}")
            return data['number']
        else:
            print(f"erro ao criar milestone: {result.stderr}")
            return None
    except Exception as e:
        print(f"erro: {e}")
        return None


def criar_issues(milestone_number):
    """criar issues para cada task"""
    print(f"\ncriando {len(TASKS)} issues...")
    
    for task in TASKS:
        titulo = f"[task-{task['numero']}] {task['titulo']}"
        labels = ",".join(task['labels'])
        
        cmd = [
            "gh", "issue", "create",
            "--repo", REPO,
            "--title", titulo,
            "--body", task['body'],
            "--label", labels,
            "--milestone", str(milestone_number)
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"  ‚úì issue criada: {task['titulo']}")
            else:
                print(f"  ‚úó erro: {result.stderr}")
        except Exception as e:
            print(f"  ‚úó erro: {e}")


def fechar_issues():
    """fechar todas as issues criadas (sprint j√° conclu√≠do)"""
    print("\nfechando issues (sprint conclu√≠do)...")
    
    for task in TASKS:
        titulo_busca = f"[task-{task['numero']}]"
        
        # buscar issue
        cmd_busca = [
            "gh", "issue", "list",
            "--repo", REPO,
            "--search", titulo_busca,
            "--json", "number",
            "--limit", "1"
        ]
        
        try:
            result = subprocess.run(cmd_busca, capture_output=True, text=True)
            if result.returncode == 0:
                issues = json.loads(result.stdout)
                if issues:
                    issue_num = issues[0]['number']
                    
                    # fechar issue
                    cmd_fechar = [
                        "gh", "issue", "close", str(issue_num),
                        "--repo", REPO,
                        "--comment", "conclu√≠do em 12/10/2025 - sprint 5"
                    ]
                    
                    subprocess.run(cmd_fechar)
                    print(f"  ‚úì issue #{issue_num} fechada")
        except Exception as e:
            print(f"  ‚úó erro: {e}")


def main():
    """executar sincroniza√ß√£o completa"""
    print("="*60)
    print("  sincroniza√ß√£o sprint 5 com github")
    print("="*60)
    
    # verificar gh cli
    try:
        subprocess.run(["gh", "--version"], capture_output=True, check=True)
    except:
        print("\nerro: github cli (gh) n√£o encontrado!")
        print("instale: https://cli.github.com/")
        return
    
    # criar milestone
    milestone_num = criar_milestone()
    
    if not milestone_num:
        print("\nerro: n√£o foi poss√≠vel criar milestone")
        print("continuando com issues...")
        milestone_num = None
    
    # criar issues
    criar_issues(milestone_num)
    
    # fechar issues (sprint j√° conclu√≠do)
    fechar_issues()
    
    print("\n" + "="*60)
    print("  sincroniza√ß√£o conclu√≠da!")
    print("="*60)
    print(f"\nverificar em:")
    print(f"https://github.com/{REPO}/issues")
    print(f"https://github.com/{REPO}/milestones")


if __name__ == "__main__":
    main()

