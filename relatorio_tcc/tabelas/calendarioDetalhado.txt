| Atividade                                    | Entregas principais                                                                                                  | Critério de aceite                                                                  |
| -------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| **A1. Levantamento bibliográfico**           | Referências (DSL, Blender API, OpenFOAM, Ergun, visualização), arquivo references.bib organizado                     | 10–15 referências-chave revisadas e salvas por tema                                 |
| **A2. Especificação da DSL**                 | Definição de blocos (bed, particles, physics, export), unidades e exemplos                                           | Rascunho da gramática + exemplos .bed válidos e inválidos com mensagens adequadas   |
| **A3. Parser/compilador da DSL**             | Implementação em Python (Lark + Pydantic); geração do params.json canônico                                           | Mesmos .bed ⇒ mesmo params.json; erros com linha/coluna reportados                  |
| **A4. Geração geométrica (Blender)**         | Script headless: paredes, tampas, partículas com empacotamento; exportação STL                                       | STL em escala correta e geometria manifold                                          |
| **A5. Template OpenFOAM (caso base)**        | Estrutura de caso base (0/, constant/, system/) com dicionários parametrizados                                       | blockMesh e snappyHexMesh -overwrite executam sem erro                              |
| **A6. Pipeline malha/solver**                | Automação blockMesh → snappyHexMesh → simpleFoam, com logs e monitoramento                                           | Solver conclui com resíduos dentro da meta no caso didático                         |
| **A7. Pós-processamento (variáveis)**        | Scripts para Δp, Δp/L, velocidade média, Re, nº de células, tempos; globals.csv padronizado                          | Arquivo globals.csv com colunas fixas e valores plausíveis                          |
| **A8. Ingestão e persistência (DB/MinIO)**   | Metadados e variáveis no Postgres; artefatos (STL/VTK/CSV/logs) no MinIO                                             | Execução registrada no DB com variáveis e links para arquivos                       |
| **A9. API (FastAPI)**                        | Rotas: upload .bed, listar execuções, obter links de arquivos                                                        | Documentação /docs acessível e rotas testáveis via curl                             |
| **A10. Frontend (React/Plotly/Three.js)**    | Páginas: login, novo job, lista de execuções, detalhes do job/variáveis, comparação                                  | Usuário envia .bed, acompanha status e visualiza resultados                         |
| **A11. Integração ponta a ponta (E2E)**      | Pipeline completo: .bed → params.json → STL → malha/solver → variáveis → DB/API → dashboard                          | Caso didático roda de ponta a ponta sem intervenção manual                          |
| **A12. Validação inicial (numérica/física)** | Estudo de malha (3 níveis) + curva Δp/L vs. Ergun; medições de tempo de preparo                                      | Tabela preliminar de GCI e erro Δp/L dentro do esperado                             |
| **A13. Documentação TCC1**                   | Proposta consolidada, guia rápido do usuário (2 págs), README atualizado                                             | Revisão do orientador e entrega no prazo                                            |
| **A14. Apresentação (slides/ensaio)**        | Slides de 10–15 min com problema, método, demo curta e resultados                                                    | Ensaio cronometrado; narrativa clara                                                |
| **A15. Gestão e checkpoints**                | Reuniões semanais com pautas, atas e ações registradas                                                               | Atas curtas e decisões registradas                                                  |
| **A16. Refino da DSL e do compilador**       | Classes de partículas polidispersas, presets, validações adicionais, mensagens de erro                               | .bed mais expressivo; cobertura de testes ≥ 85% e compatibilidade com casos do TCC1 |
| **A17. Otimizações de modelagem (Blender)**  | Verificações automáticas de manifold, suporte opcional a formas adicionais, tempo de exportação reduzido             | STL validado automaticamente; redução de ~20% no tempo médio de geração             |
| **A18. Automação de estudos e DOE**          | Execução batelada com variações de velocidade superficial e diâmetro; 3 réplicas por ponto; planilha de planejamento | Matriz DOE completa; reprodutibilidade entre réplicas documentada                   |
| **A19. GCI completo e validação Δp/L**       | Estudo de independência de malha com 3 níveis; comparação com Ergun e faixa de erro em Δp/L                          | Índice GCI calculado; erro Δp/L dentro da meta predefinida                          |
| **A20. Comparador no dashboard**             | Telas de comparação lado a lado, filtros por variante, exportação de gráficos e tabelas                              | Usuário seleciona 2–3 execuções e exporta PDF ou CSV                                |
| **A21. Relatórios automáticos**              | Geração de relatório em PDF a partir de templates Markdown/LaTeX; integração com dashboard                           | Relatório reproduzível com cabeçalhos, figuras e referências                        |
| **A22. Hardening do backend**                | RBAC, limites de taxa, logs estruturados, métricas de serviço e URLs assinadas no MinIO                              | Testes de carga básicos e checklist de segurança atendidos                          |
| **A23. Performance e execução avançada**     | Paralelização por job, fila com prioridades; opções de execução em HPC ou múltiplos nós                              | Redução de ~25% no tempo de fila em cenários de carga                               |
| **A24. Pacote de replicação**                | Repositório com scripts, dataset exemplo, docker-compose.yml e instruções                                            | Ambiente recriado do zero por avaliador externo                                     |
| **A25. Monografia TCC2**                     | Texto completo com resultados, discussão e conclusões, conforme ABNT                                                 | Entrega revisada pelo orientador e pronta para banca                                |
| **A26. Defesa e demonstração**               | Slides finais, vídeo de demo curta, roteiro e ensaio                                                                 | Apresentação dentro do tempo e domínio do conteúdo                                  |
| **A27. Publicação e depósito**               | Depósito do código no Zenodo ou similar com DOI, licença aberta, release no repositório                              | Artefatos acessíveis publicamente e citáveis                                        |
| **A28. Auditoria de reprodutibilidade**      | Execução cega por colega que segue somente o guia de replicação                                                      | Resultados dentro da margem esperada e checklist assinado                           |
| **A29. Gestão e checkpoints TCC2**           | Reuniões quinzenais, atas, atualização de riscos                                                                     | Atas e listas de pendências registradas                                             |
